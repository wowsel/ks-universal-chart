---
# Source: ks-universal/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: app1
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: app1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: app1
      app.kubernetes.io/instance: mychart
  minAvailable: 1
---
# Source: ks-universal/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app1
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: app1
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/my-role
imagePullSecrets:
  - name: my-registry-secret
---
# Source: ks-universal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: https
      port: 443
      targetPort: 8443
      protocol: TCP
  selector:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: mychart
---
# Source: ks-universal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: app1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: app1
      app.kubernetes.io/instance: mychart
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app1
        app.kubernetes.io/instance: mychart
      annotations:
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: app1
      imagePullSecrets:
        - name: my-registry-secret
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        
        
        
        - name: main
          image: nginx:1.21
          args:
            - --config
            - /etc/nginx/nginx.conf
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: http-metrics
              containerPort: 9113
              protocol: TCP
          envFrom:
            - configMapRef:
                name: mychart-app-config
            - secretRef:
                name: mychart-app-secrets
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: mychart-app-secrets
                  key: database-url
            - name: API_KEY
              value: "some-api-key"
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /custom-health
              port: http
            initialDelaySeconds: 45
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - nginx -s quit
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          key: node-role
          operator: Equal
          value: infrastructure
---
# Source: ks-universal/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: app1
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: app1
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: app1
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
    - pods:
        metric:
          name: packets-per-second
        target:
          averageValue: 1k
          type: AverageValue
      type: Pods
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: ks-universal/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: cleanup
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cleanup
spec:
  activeDeadlineSeconds: 600
  backoffLimit: 3
  template:
    metadata:
      labels:
        helm.sh/chart: ks-universal-0.1.0
        app.kubernetes.io/name: mychart
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: cleanup
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: my-registry-secret
      containers:
        
        
        
        - name: main
          image: cleanup-tool:v1.0
          args:
            - --older-than
            - 7d
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /health
              port: http
            periodSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - sleep 10
---
# Source: ks-universal/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - example.com
      secretName: example-tls
  rules:
    - host: example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 8080
---
# Source: ks-universal/templates/auto-services.yaml
# auto-services.yaml
---
# Source: ks-universal/templates/configs.yaml
# configs.yaml
---
# Source: ks-universal/templates/deployment.yaml
# deployment.yaml
---
# Source: ks-universal/templates/hpa.yaml
# hpa.yaml
---
# Source: ks-universal/templates/ingress.yaml
# ingress.yaml
---
# Source: ks-universal/templates/job.yaml
# job.yaml
---
# Source: ks-universal/templates/pdb.yaml
# pdb.yaml
---
# Source: ks-universal/templates/service.yaml
# service.yaml
---
# Source: ks-universal/templates/serviceaccount.yaml
# serviceaccount.yaml
---
# Source: ks-universal/templates/servicemonitor.yaml
# servicemonitor.yaml
---
# Source: ks-universal/templates/configs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mychart-app-secrets
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
type: Opaque
data:
  api-key: YzJWamNtVjA=
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0Bob3N0OjU0MzIvZGI=
---
# Source: ks-universal/templates/configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-app-config
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
data:
  APP_ENV: "production"
  CACHE_ENABLED: "true"
  LOG_LEVEL: "info"
---
# Source: ks-universal/templates/configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-nginx-conf
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
data:
  nginx.conf: "events {\n  worker_connections  1024;\n}\nhttp {\n  server {\n    listen 80;\n    location / {\n      root /usr/share/nginx/html;\n    }\n  }\n}\n"
---
# Source: ks-universal/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: app1-migrations
  labels:
    helm.sh/chart: ks-universal-0.1.0
    app.kubernetes.io/name: mychart
    app.kubernetes.io/instance: mychart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: app1-migrations
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        helm.sh/chart: ks-universal-0.1.0
        app.kubernetes.io/name: mychart
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: app1-migrations
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: my-registry-secret
      containers:
        
        
        
        - name: main
          image: nginx:1.21
          args:
            - --config
            - /etc/nginx/nginx.conf
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: http-metrics
              containerPort: 9113
              protocol: TCP
          envFrom:
            - configMapRef:
                name: mychart-app-config
            - secretRef:
                name: mychart-app-secrets
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: mychart-app-secrets
                  key: database-url
            - name: API_KEY
              value: "some-api-key"
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /custom-health
              port: http
            initialDelaySeconds: 45
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - nginx -s quit
