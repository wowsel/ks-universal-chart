# Общие настройки для всего чарта
generic:
 # Дополнительные imagePullSecrets, будут добавлены во все pods
 extraImagePullSecrets: {}
 # extraImagePullSecrets:
 #   - name: my-registry-secret

# Общие настройки для всех deployments
deploymentsGeneral:
 # Автоматическое создание ServiceMonitor если есть порт http-metrics
 autoCreateServiceMonitor: false
 
 # Автоматическое создание soft anti-affinity правил
 autoCreateSoftAntiAffinity: false

 # Общие настройки для всех ServiceMonitor
 serviceMonitor:
   interval: 30s
   scrapeTimeout: 10s
   path: /metrics
   # labels:
   #   prometheus: default
   # relabelings: []
   # metricRelabelings: []

 # Общие настройки для всех подов
 # securityContext:
 #   runAsNonRoot: true
 #   runAsUser: 1000
 #   fsGroup: 1000
 
 # nodeSelector:
 #   disktype: ssd
 
 # tolerations:
 #   - key: "dedicated"
 #     operator: "Equal"
 #     value: "backend"
 #     effect: "NoSchedule"
 
 # affinity:
 #   nodeAffinity:
 #     requiredDuringSchedulingIgnoredDuringExecution:
 #       nodeSelectorTerms:
 #         - matchExpressions:
 #             - key: kubernetes.io/e2e-az-name
 #               operator: In
 #               values:
 #                 - e2e-az1
 
 # Общие настройки проб для всех контейнеров
 # probes:
 #   livenessProbe:
 #     httpGet:
 #       path: /healthz
 #       port: http
 #     initialDelaySeconds: 30
 #   readinessProbe:
 #     httpGet:
 #       path: /ready
 #       port: http
 #     initialDelaySeconds: 5
 #   startupProbe:
 #     httpGet:
 #       path: /startup
 #       port: http
 #     failureThreshold: 30
 #     periodSeconds: 10

 # Общие настройки lifecycle для всех контейнеров
 # lifecycle:
 #   preStop:
 #     exec:
 #       command: ["/bin/sh", "-c", "sleep 10"]

# Общие настройки для всех ingresses
ingressesGeneral:
 # annotations:
 #   nginx.ingress.kubernetes.io/rewrite-target: /
 # ingressClassName: nginx
 # tls:
 #   - secretName: tls-secret

# Описание deployments
deployments:
 # Пример полного deployment
 myapp:
   # Количество реплик (игнорируется если определен HPA)
   replicas: 2

   # Автоматическое создание ServiceMonitor (переопределяет общие настройки)
   autoCreateServiceMonitor: true
   
   # Настройки ServiceMonitor для этого deployment
   serviceMonitor:
     interval: 15s
     path: /custom-metrics
     
   # Настройки HPA
   # hpa:
   #   minReplicas: 2
   #   maxReplicas: 5
   #   metrics:
   #     - type: Resource
   #       resource:
   #         name: cpu
   #         target:
   #           type: Utilization
   #           averageUtilization: 80

   # Настройки PDB
   # pdb:
   #   minAvailable: 1
   #   # или
   #   # maxUnavailable: 1

   # Настройки ServiceAccount
   # serviceAccount:
   #   annotations:
   #     eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/my-role"

   # Настройки миграций
   migrations:
     enabled: true
     args: ["db:migrate"]
     backoffLimit: 3

   # Описание контейнеров
   containers:
     main:
       # Образ (обязательное поле)
       image: nginx
       # Тег образа (обязательное поле)
       imageTag: latest
       
       # Поддержка динамических значений
       # image: '{{ $.Values.werf.repo }}'
       # imageTag: '{{ index $.Values.werf.tag $.Values.werf.name }}'

       # Порты контейнера
       ports:
         http:
           containerPort: 8080
         # Порт для автоматического создания ServiceMonitor
         http-metrics:
           containerPort: 9090

       # Переменные окружения
       env:
         - name: STATIC_VALUE
           value: "some-value"
         - name: CONFIG_VALUE
           valueFrom:
             configMapKeyRef:
               name: myapp-config
               key: some-key
         - name: SECRET_VALUE
           valueFrom:
             secretKeyRef:
               name: myapp-secret
               key: some-secret

       # Монтирование ConfigMap/Secret целиком
       # envFrom:
       #   - type: configMap
       #     configName: myapp-config
       #   - type: secret
       #     configName: myapp-secret

       # Ресурсы контейнера
       # resources:
       #   limits:
       #     cpu: 100m
       #     memory: 128Mi
       #   requests:
       #     cpu: 100m
       #     memory: 128Mi

       # Проверки работоспособности (переопределяют общие)
       # probes:
       #   livenessProbe:
       #     httpGet:
       #       path: /healthz
       #       port: http
       #   readinessProbe:
       #     httpGet:
       #       path: /ready
       #       port: http

       # Lifecycle хуки (переопределяют общие)
       # lifecycle:
       #   preStop:
       #     exec:
       #       command: ["/bin/sh", "-c", "sleep 10"]

   # Аннотации пода
   # podAnnotations:
   #   prometheus.io/scrape: "true"
   #   prometheus.io/port: "9090"

   # Специфичные настройки безопасности
   # securityContext:
   #   runAsNonRoot: true
   #   runAsUser: 1000

   # Специфичные настройки размещения
   # nodeSelector:
   #   disktype: ssd
   # tolerations:
   #   - key: "dedicated"
   #     operator: "Equal"
   #     value: "backend"
   # affinity:
   #   nodeAffinity:
   #     requiredDuringSchedulingIgnoredDuringExecution:
   #       nodeSelectorTerms:
   #         - matchExpressions:
   #             - key: kubernetes.io/e2e-az-name
   #               operator: In
   #               values:
   #                 - e2e-az1

# Описание отдельных jobs
jobs:
 data-import:
   containers:
     main:
       image: myapp
       imageTag: latest
       args: ["import-data"]
   # activeDeadlineSeconds: 600
   # backoffLimit: 2
   # restartPolicy: Never

# Описание отдельных сервисов
services:
 # Будут автоматически созданы для deployments с портами
 # если нужна особая конфигурация:
 myservice:
   type: ClusterIP
   ports:
     - name: http
       port: 80
       targetPort: 8080
       protocol: TCP

# Описание ingress ресурсов
ingresses:
 myingress:
   annotations:
     nginx.ingress.kubernetes.io/rewrite-target: /
   ingressClassName: nginx
   # tls:
   #   - secretName: tls-secret
   hosts:
     - host: app.example.com
       paths:
         - path: /
           pathType: Prefix
           port: 80

# Описание ConfigMap и Secret
configs:
 myapp-config:
   type: configmap  # или secret
   data:
     config.yaml: |
       key1: value1
       key2: value2
     # Для secret значения будут автоматически закодированы в base64