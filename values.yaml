generic:
  extraImagePullSecrets: {}

# Общие настройки конфигурации
configs: #{}
  # config-name:
  #   type: configmap # или secret
  #   data:
  #     key1: value1
  #     key2: value2
  postgres-config:
    type: configmap
    data:
      DB_HOST: postgres
      DB_PORT: "5432"
  db-credentials:
    type: secret
    data:
      DB_PASSWORD: supersecret

      
services:
  serviceName1:
    type: ClusterIP
    ports:
      - name: http
        protocol: TCP
        port: 80
        targetPort: 3000

  # serviceName:
  #   type: ClusterIP
  #   ports:
  #     - name: http
  #       protocol: TCP
  #       port: 80
  #       targetPort: 3000

ingressesGeneral:
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/enable-cors: "true"
  ingressClassName: nginx
  tls: []
    # - hosts:
    #     - chart-example.local
    #   secretName: chart-example-tls

ingresses: 
  ingressName1:
    annotations: {}
    ingressClassName: nginx
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: Prefix
  # ingressName:
  #   annotations: {}
  #   ingressClassName: nginx
  #   hosts:
  #     - host: example.com
  #       paths:
  #         - path: /
  #           pathType: Prefix

deploymentsGeneral:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
  nodeSelector: {}
  tolerations: []
  affinity: {}

deployments: 
  example-deployment:
    autoCreateService: true # автоматически создает сервис на основе портов
    serviceType: ClusterIP # тип создаваемого сервиса
    replicas: 1
    annotations: {}
    podAnnotations: {}
    securityContext:
      runAsNonRoot: true
    containers:
      app:
        image: nginx # required
        imageTag: latest # required
        command: []
        args: []
        env: 
          name: value1
          value: value1-value
        envFrom:
          - configName: postgres-config
            type: configmap
          - configName: db-credentials
            type: secret
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
        ports:
          http:
            containerPort: 80
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http
    #     livenessProbe:
    #       httpGet:
    #         path: /
    #         port: http
    #     startupProbe:
    #       httpGet:
    #         path: /
    #         port: http