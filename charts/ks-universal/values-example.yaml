# Global deployment settings that will be inherited by all deployments unless overridden
deploymentsGeneral:
  # Deployment update strategy configuration
  strategy:
    type: RollingUpdate    # Strategy type: RollingUpdate or Recreate
    rollingUpdate:         # Configuration for RollingUpdate strategy
      maxSurge: 30%        # Maximum number of pods that can be created above desired number
      maxUnavailable: 20%  # Maximum number of pods that can be unavailable during the update

  # Pod security context settings
  securityContext:
    runAsNonRoot: true    # Force the container to run as non-root user
    runAsUser: 1000       # Specify the user ID to run the container

  # Node selection criteria for pod scheduling
  nodeSelector:
    kubernetes.io/os: linux  # Schedule pods only on Linux nodes

  # Default health check probe configurations for all containers
  probes:
    # Liveness probe - determines if the container is running properly
    livenessProbe:
      httpGet:
        path: /health     # HTTP endpoint to check container health
        port: http        # Port name defined in container ports
      initialDelaySeconds: 30  # Time to wait before first probe
      periodSeconds: 10        # How often to perform the probe

    # Readiness probe - determines if the container is ready to serve traffic
    readinessProbe:
      httpGet:
        path: /ready      # HTTP endpoint to check container readiness
        port: http        # Port name defined in container ports
      initialDelaySeconds: 5   # Time to wait before first probe
      periodSeconds: 10        # How often to perform the probe

# Generic configurations applied across all resource types
generic:
  # Global ingress configurations
  ingressesGeneral:
    annotations:
      nginx.ingress.kubernetes.io/enable-cors: "true"  # Enable CORS for all ingresses
    domain: example.com   # Default domain for all ingresses

  # Global ServiceMonitor configurations for Prometheus monitoring
  serviceMonitorGeneral:
    labels:
      prometheus: kube-prometheus  # Labels for ServiceMonitor discovery
    interval: 30s        # How often to scrape metrics
    scrapeTimeout: 10s   # Maximum time for each scrape operation

  # Additional image pull secrets for private registries
  extraImagePullSecrets:
    - name: registry-secret  # Name of the Kubernetes secret containing registry credentials

# Configuration and Secret management
configs:
  # Application configuration as ConfigMap
  app-config:
    type: configMap     # Type can be 'configMap' or 'secret'
    data:
      config.yaml: |    # Configuration file content
        environment: production
        log_level: info
        features:
          feature1: true
          feature2: false

  # Application secrets
  app-secrets:
    type: secret       # Creates a Kubernetes Secret
    data:
      API_KEY: "your-api-key"           # Will be base64 encoded automatically
      DB_PASSWORD: "your-db-password"    # Will be base64 encoded automatically

# Secret reference groups for reuse across deployments
secretRefs:
  # Shared secrets group
  shared-secrets:
    - name: S3_SECRET    # Environment variable name
      secretKeyRef:
        name: passwords  # Kubernetes Secret name
        key: s3-secret-key  # Key in the Secret
    - name: OPENSEARCH_PASSWORD
      secretKeyRef:
        name: passwords
        key: opensearch-password

  # Database-specific secrets
  db-secrets:
    - name: DB_PASSWORD
      secretKeyRef:
        name: database-creds
        key: password
    - name: DB_USER
      secretKeyRef:
        name: database-creds
        key: username
        
# Main application deployments
deployments:
  # Backend API service configuration
  backend-api:
    strategy:
      type: Recreate    # Use Recreate strategy instead of default RollingUpdate
    
    replicas: 3         # Number of pod replicas to maintain
    
    # Enable automatic resource creation
    autoCreateService: true           # Create a Service automatically
    autoCreateIngress: true          # Create an Ingress automatically
    autoCreateCertificate: true      # Create a Certificate automatically
    autoCreateServiceMonitor: true   # Create a ServiceMonitor for Prometheus
    autoCreatePdb: true             # Create a PodDisruptionBudget
    
    # PDB (Pod Disruption Budget) configuration
    pdbConfig:
      minAvailable: 2   # Minimum number of pods that must be available

    # SSL/TLS certificate configuration
    certificate:
      clusterIssuer: letsencrypt-prod  # cert-manager cluster issuer

    # Container specifications
    containers:
      main:
        image: backend-api          # Container image name
        imageTag: v1.0.0           # Container image tag
        
        # Port definitions
        ports:
          http:
            containerPort: 8080    # Main application port
            protocol: TCP         # Protocol (TCP/UDP)
          http-metrics:
            containerPort: 9090   # Prometheus metrics port

        # Environment variables
        env:
          - name: CONFIG_PATH
            value: /config/config.yaml
          - name: API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: API_KEY

        # Load environment variables from ConfigMaps/Secrets
        envFrom:
          - type: configMap
            configName: app-config

        # Reference predefined secret groups
        secretRefs:
          - shared-secrets  # Use secrets from shared-secrets group
          - db-secrets     # Use secrets from db-secrets group

        # Mount volumes into container
        volumeMounts:
          - name: config-volume
            mountPath: /config
            readOnly: true

        # Resource limits and requests
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi

    # Pod volumes configuration
    volumes:
      - name: config-volume
        configMap:
          name: app-config

    # Ingress configuration
    ingress:
      hosts:
        - subdomain: api    # Will result in api.example.com
          paths:
            - path: /
              pathType: Prefix

    # Horizontal Pod Autoscaling configuration
    hpa:
      minReplicas: 3        # Minimum number of replicas
      maxReplicas: 10       # Maximum number of replicas
      metrics:
        - type: Resource    # Type of metric to scale on
          resource:
            name: cpu      # Scale based on CPU usage
            target:
              type: Utilization
              averageUtilization: 80  # Target CPU utilization

# Scheduled jobs (CronJobs)
cronJobs:
  backup:
    schedule: "0 0 * * *"    # Run daily at midnight (cron format)
    containers:
      main:
        image: backup-job
        imageTag: v1.0.0
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        env:
          - name: BACKUP_PATH
            value: /backup

# One-time jobs (Jobs)
jobs:
  db-migration:
    containers:
      main:
        image: migration-job
        imageTag: v1.0.0
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        env:
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: DB_PASSWORD

# Standalone services
services:
  external-service:
    type: ClusterIP           # Service type (ClusterIP, NodePort, LoadBalancer)
    ports:
      - name: http
        port: 80             # Port exposed by the service
        targetPort: 8080     # Port to forward to in the pod

# Persistent Volume Claims
persistentVolumeClaims:
  data-storage:
    accessModes:
      - ReadWriteOnce        # Access mode (ReadWriteOnce, ReadOnlyMany, ReadWriteMany)
    storageClassName: standard  # Storage class to use
    size: 10Gi              # Size of the volume

# Standalone ingresses
ingresses:
  external:
    hosts:
      - host: external.example.com
        paths:
          - path: /
            pathType: Prefix
            port: 80
  ingresses:
    epg:
      hosts:
        - host: myhost.com
          paths:
            - path: /handler/health
              pathType: Exact
              service: handler
              portName: http
        - subdomain: main  # Will be main.example.com if domain is set in generic.ingressesGeneral
          paths:
            - path: /main/health
              pathType: Exact
              service: main
              portName: http
        - host: ""  # Will use domain from generic.ingressesGeneral
          paths:
            - path: /main2/health
              pathType: Exact
              service: main2
              portName: http