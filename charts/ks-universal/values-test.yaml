# Общие настройки для всех deployments
deploymentsGeneral:
  # Общие аннотации для всех подов
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"

  # Общие настройки securityContext
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000

  # Общие настройки расположения подов
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.io/arch: amd64

  # Общие tolerations
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
      effect: "NoSchedule"

  # Общие настройки affinity
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: node-type
                operator: In
                values:
                  - performance

  # Общие настройки проб
  probes:
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /ready
        port: http
      initialDelaySeconds: 5
      periodSeconds: 10
    startupProbe:
      httpGet:
        path: /health
        port: http
      failureThreshold: 30
      periodSeconds: 10

  # Общие настройки lifecycle hooks
  lifecycle:
    preStop:
      exec:
        command: ["/bin/sh", "-c", "sleep 10"]

# Общие настройки для всех ingress ресурсов
ingressesGeneral:
  # Общие аннотации для всех ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
    
  # Дефолтный ingressClassName
  ingressClassName: nginx
  
  # Общие настройки TLS
  tls:
    - secretName: wildcard-tls

# Явно создаваемые ConfigMap/Secret ресурсы
configs:
  app-config:
    type: configmap  # или secret
    data:
      config.yaml: |
        key1: value1
        key2: value2
      api.json: |
        {
          "endpoint": "https://api.example.com"
        }
  
  app-secrets:
    type: secret
    data:
      API_KEY: super-secret-key
      DB_PASSWORD: very-secure-password

# Явно создаваемые сервисы
services:
  frontend-svc:
    type: ClusterIP  # ClusterIP, NodePort, LoadBalancer
    ports:
      - name: http
        port: 80
        targetPort: 8080
      - name: https
        port: 443
        targetPort: 8443
  
  backend-svc:
    type: NodePort
    ports:
      - name: http
        port: 80
        targetPort: 8080
        nodePort: 30080

# Явно создаваемые ingress ресурсы
ingresses:
  main-ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    ingressClassName: nginx
    tls:
      - hosts:
          - example.com
        secretName: example-tls
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: Prefix
            port: 80

# Описание деплойментов
deployments:
  # Пример простого деплоймента
  simple-app:
    replicas: 2
    containers:
      main:
        image: nginx
        imageTag: 1.21.0
        ports:
          http:
            containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

  # Пример сложного деплоймента со всеми возможностями
  complex-app:
    replicas: 3
    
    # Автоматическое создание сервис аккаунта
    autoCreateServiceAccount: true
    serviceAccountConfig:
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/my-role

    # Автоматическое создание PDB
    autoCreatePdb: true
    pdbConfig:
      maxUnavailable: 1
      # или minAvailable: "50%"

    # Автоматическое создание Ingress
    autoCreateIngress: true
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      ingressClassName: nginx
      hosts:
        - host: my-app.example.com
          paths:
            - path: /
              pathType: Prefix
              port: 8080  # опционально
              portName: http  # опционально, будет использован первый порт если не указано
      tls:
        - hosts:
            - my-app.example.com
          secretName: my-app-tls

    # Автоматическое создание ServiceMonitor
    autoCreateServiceMonitor: true
    serviceMonitorPort: http  # опционально, будет использован первый порт если не указано
    serviceMonitor:
      labels:
        release: prometheus-operator
      interval: 30s
      scrapeTimeout: 10s
      relabelings:
        - sourceLabels: [__meta_kubernetes_pod_name]
          targetLabel: pod
      metricRelabelings:
        - sourceLabels: [__name__]
          regex: 'go_.*'
          action: drop

    # Pod Disruption Budget (явное создание)
    pdb:
      maxUnavailable: 1

    # Настройки Pod
    podAnnotations:
      prometheus.io/path: /metrics
      vault.hashicorp.com/agent-inject: "true"

    # Security Context
    securityContext:
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000

    # Настройки расположения подов
    nodeSelector:
      disk-type: ssd

    # Affinity правила
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/e2e-az-name
              operator: In
              values:
              - e2e-az1
              - e2e-az2
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - complex-app
            topologyKey: kubernetes.io/hostname

    # Tolerations
    tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoExecute"
        tolerationSeconds: 3600

    # HPA настройки
    hpa:
      minReplicas: 2
      maxReplicas: 10
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 80
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 80
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 100
            periodSeconds: 15
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
          - type: Percent
            value: 100
            periodSeconds: 15
          - type: Pods
            value: 4
            periodSeconds: 15
          selectPolicy: Max

    # Описание контейнеров
    containers:
      # Основной контейнер
      main:
        image: my-app
        imageTag: v1.0.0
        ports:
          http:
            containerPort: 8080
          metrics:
            containerPort: 9090
        env:
          - name: CONFIG_FILE
            value: "/config/config.yaml"
          - name: API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: API_KEY
        envFrom:
          - type: configMap
            configName: app-config
          - type: secret
            configName: app-secrets
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "echo Container started > /tmp/started"]
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
        probes:
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 30
            periodSeconds: 10

      # Сайдкар контейнер
      sidecar:
        image: sidecar
        imageTag: v1.0.0
        ports:
          metrics:
            containerPort: 9091
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

# Явные Job ресурсы
jobs:
  backup-job:
    activeDeadlineSeconds: 600
    backoffLimit: 3
    containers:
      main:
        image: backup-tool
        imageTag: v1.0.0
        env:
          - name: BACKUP_PATH
            value: "/backup"
        resources:
          requests:
            cpu: 200m
            memory: 256Mi

# Общие настройки для всех ресурсов
generic:
  extraImagePullSecrets:
    - name: registry-secret