suite: test universal chart
templates:
  - configs.yaml
  - deployment.yaml
  - hpa.yaml
  - ingress.yaml
  - job.yaml
  - pdb.yaml
  - service.yaml
  - serviceaccount.yaml
  - servicemonitor.yaml
  - cronjob.yaml
  - certificate.yaml

tests:
  - it: should properly handle global settings
    values:
      - ./values/global-settings.yaml
    asserts:
      # Check global settings are applied to deployments
      - template: deployment.yaml
        matchRegex:
          path: spec.template.spec.imagePullSecrets[0].name
          pattern: my-registry-secret
      - template: deployment.yaml
        equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - template: deployment.yaml
        equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - template: deployment.yaml
        equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000
      - template: deployment.yaml
        matchRegex:
          path: spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].preference.matchExpressions[0].key
          pattern: node-type
      - template: deployment.yaml
        equal:
          path: spec.template.spec.tolerations[0].key
          value: node-role.kubernetes.io/control-plane

  - it: should create a complete complex deployment with all features
    values:
      - ./values/complex-deployment.yaml
    asserts:
      - template: deployment.yaml
        documentIndex: 2
        equal:
          path: kind
          value: PodDisruptionBudget
      # Check main deployment
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: kind
          value: Deployment
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.template.spec.containers[0].name
          value: main
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.template.spec.containers[0].image
          value: my-app:v1.0.0
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.template.spec.containers[1].name
          value: sidecar

      # Check ServiceAccount
      - template: deployment.yaml
        documentIndex: 1    # ServiceAccount
        equal:
          path: metadata.annotations["eks.amazonaws.com/role-arn"]
          value: arn:aws:iam::123456789012:role/my-role

      # Check Ingress
      - template: deployment.yaml
        documentIndex: 3    # Ingress
        equal:
          path: spec.rules[0].host
          value: my-app.example.com

      # Check ServiceMonitor
      - template: deployment.yaml
        documentIndex: 4    # ServiceMonitor
        equal:
          path: spec.endpoints[0].interval
          value: 30s
      - template: deployment.yaml
        documentIndex: 4
        equal:
          path: metadata.labels.release
          value: prometheus-operator

  - it: should handle deployment with migrations
    values:
      - ./values/deployment-with-migrations.yaml
    asserts:
      - template: job.yaml
        equal:
          path: kind
          value: Job
      - template: job.yaml
        equal:
          path: metadata.name
          value: app-with-migrations-migrations
      - template: job.yaml
        equal:
          path: spec.backoffLimit
          value: 3

  - it: should handle deployment with init containers
    values:
      - ./values/deployment-with-init.yaml
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].image
          value: busybox:1.28
      - template: deployment.yaml
        exists:
          path: spec.template.spec.containers[0].args

  - it: should handle deployment with volumes
    values:
      - ./values/deployment-with-volumes.yaml
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.volumes[0].name
          value: config-volume
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /etc/config

  - it: should properly handle config creation
    values:
      - ./values/configs.yaml
    asserts:
      - template: configs.yaml
        equal:
          path: metadata.name
          value: app-config
        documentIndex: 0
      - template: configs.yaml
        equal:
          path: kind
          value: Secret
        documentIndex: 1

  - it: should handle ingress with multiple paths
    values:
      - ./values/ingress-multi-path.yaml
    asserts:
      - template: ingress.yaml
        equal:
          path: kind
          value: Ingress
      - template: ingress.yaml
        equal:
          path: spec.rules[0].http.paths[0].path
          value: /
      - template: ingress.yaml
        equal:
          path: spec.rules[0].http.paths[1].path
          value: /api

  - it: should handle complex HPA configuration
    values:
      - ./values/hpa-complex.yaml
    asserts:
      - template: hpa.yaml
        equal:
          path: kind
          value: HorizontalPodAutoscaler
      - template: hpa.yaml
        equal:
          path: spec.minReplicas
          value: 2
      - template: hpa.yaml
        equal:
          path: spec.maxReplicas
          value: 10

  - it: should handle service with multiple ports
    values:
      - ./values/service-multi-port.yaml
    asserts:
      - template: service.yaml
        equal:
          path: kind
          value: Service
      - template: service.yaml
        equal:
          path: spec.type
          value: LoadBalancer

  - it: should handle jobs with backoff limit
    values:
      - ./values/job-with-backoff.yaml
    asserts:
      - template: job.yaml
        equal:
          path: kind
          value: Job
      - template: job.yaml
        equal:
          path: spec.activeDeadlineSeconds
          value: 600
      - template: job.yaml
        equal:
          path: spec.backoffLimit
          value: 3

  - it: should properly handle certificate creation
    values:
      - ./values/certificate-config.yaml
    asserts:
      - template: deployment.yaml
        documentIndex: 2  # Certificate должен быть третьим документом
        equal:
          path: kind
          value: Certificate
      - template: deployment.yaml
        documentIndex: 2
        equal:
          path: spec.secretName
          value: app-with-cert-tls
      - template: deployment.yaml
        documentIndex: 2
        contains:
          path: spec.dnsNames
          content: secure-app.example.com
      - template: deployment.yaml
        documentIndex: 2
        equal:
          path: spec.issuerRef.kind
          value: ClusterIssuer
      - template: deployment.yaml
        documentIndex: 2
        equal:
          path: spec.issuerRef.name
          value: letsencrypt-prod

  - it: should create soft anti-affinity rules
    values:
      - ./values/soft-antiaffinity.yaml
    asserts:
      - template: deployment.yaml
        exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - template: deployment.yaml
        equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].weight
          value: 100
      - template: deployment.yaml
        equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.topologyKey
          value: kubernetes.io/hostname

  - it: should properly configure cronjob
    values:
      - ./values/cronjob-config.yaml
    asserts:
      - template: cronjob.yaml
        equal:
          path: kind
          value: CronJob
      - template: cronjob.yaml
        equal:
          path: spec.schedule
          value: "0 * * * *"
      - template: cronjob.yaml
        equal:
          path: spec.successfulJobsHistoryLimit
          value: 3
      - template: cronjob.yaml
        equal:
          path: spec.failedJobsHistoryLimit
          value: 1
      - template: cronjob.yaml
        equal:
          path: spec.concurrencyPolicy
          value: Forbid
  - it: should properly handle secretRefs configuration
    values:
      - ./values/secretrefs-config.yaml
    asserts:
      - template: deployment.yaml
        equal:
          path: kind
          value: Deployment
      - template: deployment.yaml
        equal:
          path: metadata.name
          value: app-with-secrets
      
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[0].name
          value: APP_ENV
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[0].value
          value: production
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[1].name
          value: API_KEY

      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[2].name
          value: S3_SECRET
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.name
          value: passwords
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.key
          value: s3-secret-key

      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[3].name
          value: OPENSEARCH_PASSWORD
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[3].valueFrom.secretKeyRef.name
          value: passwords
      
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[4].name
          value: DB_PASSWORD
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[4].valueFrom.secretKeyRef.name
          value: database-creds
      
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[5].name
          value: DB_USER
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[5].valueFrom.secretKeyRef.name
          value: database-creds
