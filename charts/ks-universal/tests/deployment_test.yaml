suite: Deployment tests
templates:
  - deployment.yaml
  - pdb.yaml
  - hpa.yaml
  - serviceaccount.yaml

tests:
  - it: should properly handle global settings
    values:
      - ./values/global-settings.yaml
    asserts:
      # Check global settings are applied to deployments
      - template: deployment.yaml
        matchRegex:
          path: spec.template.spec.imagePullSecrets[0].name
          pattern: my-registry-secret
      - template: deployment.yaml
        equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - template: deployment.yaml
        equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - template: deployment.yaml
        equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000
      - template: deployment.yaml
        matchRegex:
          path: spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].preference.matchExpressions[0].key
          pattern: node-type
      - template: deployment.yaml
        equal:
          path: spec.template.spec.tolerations[0].key
          value: node-role.kubernetes.io/control-plane

  - it: should create a complete complex deployment with all features
    values:
      - ./values/complex-deployment.yaml
    asserts:
      - template: deployment.yaml
        documentIndex: 2
        equal:
          path: kind
          value: PodDisruptionBudget
      # Check main deployment
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: kind
          value: Deployment
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.template.spec.containers[0].name
          value: main
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.template.spec.containers[0].image
          value: my-app:v1.0.0
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.template.spec.containers[1].name
          value: sidecar

      # Check ServiceAccount
      - template: deployment.yaml
        documentIndex: 1
        equal:
          path: metadata.annotations["eks.amazonaws.com/role-arn"]
          value: arn:aws:iam::123456789012:role/my-role

  - it: should handle deployment with init containers
    values:
      - ./values/deployment-with-init.yaml
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].image
          value: busybox:1.28
      - template: deployment.yaml
        exists:
          path: spec.template.spec.containers[0].args

  - it: should handle deployment with volumes
    values:
      - ./values/deployment-with-volumes.yaml
    asserts:
      - template: deployment.yaml
        equal:
          path: spec.template.spec.volumes[0].name
          value: config-volume
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /etc/config

  - it: should create soft anti-affinity rules
    values:
      - ./values/soft-antiaffinity.yaml
    asserts:
      - template: deployment.yaml
        exists:
          path: spec.template.spec.affinity.podAntiAffinity
      - template: deployment.yaml
        equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].weight
          value: 100
      - template: deployment.yaml
        equal:
          path: spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].podAffinityTerm.topologyKey
          value: kubernetes.io/hostname

  - it: should properly handle secretRefs configuration
    values:
      - ./values/secretrefs-config.yaml
    asserts:
      - template: deployment.yaml
        equal:
          path: kind
          value: Deployment
      - template: deployment.yaml
        equal:
          path: metadata.name
          value: app-with-secrets
      
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[0].name
          value: APP_ENV
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[0].value
          value: production
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[1].name
          value: API_KEY

      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[2].name
          value: S3_SECRET
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.name
          value: passwords
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.key
          value: s3-secret-key

      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[3].name
          value: OPENSEARCH_PASSWORD
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[3].valueFrom.secretKeyRef.name
          value: passwords
      
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[4].name
          value: DB_PASSWORD
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[4].valueFrom.secretKeyRef.name
          value: database-creds
      
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[5].name
          value: DB_USER
      - template: deployment.yaml
        equal:
          path: spec.template.spec.containers[0].env[5].valueFrom.secretKeyRef.name
          value: database-creds

  - it: should properly handle update strategy configurations
    values:
      - ./values/update-strategy.yaml
    asserts:
      # Проверяем наследование глобальной стратегии
      - template: deployment.yaml
        documentIndex: 1
        equal:
          path: metadata.name
          value: inherit-strategy-app
      - template: deployment.yaml
        documentIndex: 1
        equal:
          path: spec.strategy.type
          value: RollingUpdate
      - template: deployment.yaml
        documentIndex: 1
        equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 30%
      - template: deployment.yaml
        documentIndex: 1
        equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 20%
      # Проверяем Recreate стратегию
      - template: deployment.yaml
        documentIndex: 3
        equal:
          path: metadata.name
          value: recreate-app
      - template: deployment.yaml
        documentIndex: 3
        equal:
          path: spec.strategy.type
          value: Recreate
      - template: deployment.yaml
        documentIndex: 3
        notExists:
          path: spec.strategy.rollingUpdate

      # Проверяем кастомную RollingUpdate стратегию
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: metadata.name
          value: custom-rolling-app
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.strategy.type
          value: RollingUpdate
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 50%
      - template: deployment.yaml
        documentIndex: 0
        equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 0
      # Проверяем минимальную RollingUpdate конфигурацию
      - template: deployment.yaml
        documentIndex: 2
        equal:
          path: metadata.name
          value: minimal-rolling-app
      - template: deployment.yaml
        documentIndex: 2
        equal:
          path: spec.strategy.type
          value: RollingUpdate
      - template: deployment.yaml
        documentIndex: 2
        notExists:
          path: spec.strategy.rollingUpdate 